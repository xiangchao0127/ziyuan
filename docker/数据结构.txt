常见数据结构：
数组(一对一)
栈
队列
链表
树(一对多)
图(多对多)
堆
散列

数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 
常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，

一. 数组

优点：
1、按照索引查询元素速度快
2、按照索引遍历数组方便

缺点：
1、数组的大小固定后就无法扩容了
2、数组只能存储一种类型的数据
3、添加，删除的操作慢，因为要移动其他的元素。

适用场景：
频繁查询，对存储空间要求不大，很少增加和删除的情况。

二.栈

栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。
 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。

三.队列

队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，
也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队

四.链表

链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，
一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。
根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。

优点：
链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；

添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；


缺点：
因为含有大量的指针域，占用空间较大；
查找元素需要遍历链表来查找，非常耗时。


适用场景：
数据量较小，需要频繁增加，删除操作的场景

五.树

树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。
把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。
它具有以下的特点：


每个节点有零个或多个子节点；

没有父节点的节点称为根节点；

每一个非根节点有且只有一个父节点；

除了根节点外，每个子节点可以分为多个不相交的子树；

二叉树是树的特殊一种，具有如下特点：


1、每个结点最多有两颗子树，结点的度最大为2。

2、左子树和右子树是有顺序的，次序不能颠倒。

3、即使某结点只有一个子树，也要区分左右子树。


二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，
所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。


扩展：
二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，
在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。
这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。

六、散列表

散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，
通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。

七.堆

就是一颗完全二叉树(从左到右，子节点必须是满的)

八.图

图是由结点的有穷集合V和边的集合E组成。
其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，
边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。

按照顶点指向的方向可分为无向图和有向图：



